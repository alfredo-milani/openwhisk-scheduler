# Tutti i valori specificati in questo file sovrascriveranno quelli presenti in 'openwhisk-deploy-kube/helm/openwhisk/values.yaml'
whisk:
  ingress:
    type: NodePort
    # assicurarsi che $ "kubectl describe nodes | grep InternalIP" ritorni 192.168.65.3 
    #  e che la porta 31001 Ã¨ disponibile
    apiHostName: 192.168.65.3
    apiHostPort: 31001
  # override openwhisk's default limit
  limits:
    # default 60
    actionsInvokesPerminute: 500
    # default 30
    actionsInvokesConcurrent: 50
    # default 60
    triggersFiresPerminute: 200
    # default 50
    actionsSequenceMaxlength: 70
    actions:
      time:
        min: "100ms"
        max: "5m"
        std: "1m"
      memory:
        min: "128m"
        max: "512m"
        std: "256m"
      concurrency:
        min: 1
        max: 20
        std: 1
      log:
        min: "0m"
        max: "10m"
        std: "10m"
    activation:
      payload:
        max: "1048576"

nginx:
  httpsNodePort: 31001

invoker:
  # to enable conucurrency (see@ https://github.com/apache/openwhisk/blob/master/docs/concurrency.md)
  containerFactory:
    enableConcurrency: true
  # completely disable OpenWhisk's log processing and rely on Kubernetes-level logs of the action containers to mitigate logging overhead
  # options: "-Dwhisk.spi.LogStoreProvider=org.apache.openwhisk.core.containerpool.logging.LogDriverLogStoreProvider"
  # options: "-Dwhisk.containerPool.akkaClient=true"
  options: "-Dwhisk.spi.LogStoreProvider=org.apache.openwhisk.core.containerpool.logging.LogDriverLogStoreProvider -Dwhisk.containerPool.akkaClient=true"

metrics:
  # collect system metrics, store and display them with prometheus
  # this will automatically spin up a Prometheus server inside your cluster that will start scraping controller and invoker metrics
  # accessing Prometheus using port forwarding: $ kubectl port-forward svc/owdev-prometheus-server 9090:9090 --namespace openwhisk
  prometheusEnabled: false
  # enable user metrics
  userMetricsEnabled: false
  # the dashboard can be accessed here: https://<whisk.ingress.apiHostName>:<whisk.ingress.apiHostPort>/monitoring/dashboards

# grafana:
#  adminPassword: passwordQQQ

# modified controller to manage priority queue
# controller's load balancer will send activation to 'to_dispatch' topic instead of 'invokerN'
controller:
  imageName: "whisk/controller"
  imageTag: "0.0.12"

# Priority queue scheduler
scheduler:
  external: false
  imageName: "ow-scheduler"
  imageTag: "0.0.14"
  imagePullPolicy: "IfNotPresent"
  replicaCount: 1
  restartPolicy: "Always"
  host: null
  # policy: pass_through
  policy: priority_queue_fifo
  tracing: false
  buffering: true
  pollIntervalMs: "50"
  fetchMinBytes: "1"
  fetchMaxWaitMs: "500"
  maxPartitionFetchBytes: "0"
  port: 8080
  persistence:
    size: 128Mi

# Performance reader
analyzer:
  external: false
  imageName: "ow-analyzer"
  imageTag: "0.0.13"
  imagePullPolicy: "IfNotPresent"
  replicaCount: 1
  restartPolicy: "Always"
  host: null
  port: 8080
  persistence:
    size: 128Mi